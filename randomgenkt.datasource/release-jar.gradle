apply plugin: 'maven-publish'

task sourcesJar(type: Jar) {
    from sourceSets.main.kotlin.srcDirs
    archiveClassifier = "sources"
}

java {
    withJavadocJar()
    withSourcesJar()
}

artifacts {
    archives javadocJar, sourcesJar
}

def gitUrl = 'https://github.com/EranBoudjnah/RandomGenKt.git'

Properties properties = new Properties()
File propertiesFile = project.rootProject.file("local.properties")
if (propertiesFile.exists()) {
    properties.load(propertiesFile.newDataInputStream())
}
def pomVersion = project.PUBLISH_VERSION
def localReleaseDestination = "${layout.buildDirectory}/release/${pomVersion}"
def ossrhUsername = properties['ossrhUsername']
def ossrhPassword = properties['ossrhPassword']

println "packageGroup = " + project.PUBLISH_GROUP_ID

nexusStaging {
    username = "${ossrhUsername}"
    password = "${ossrhPassword}"
    packageGroup = project.PUBLISH_GROUP_ID
}

publishing {
    repositories {
        maven {
            name = "Local"
            url = "file://${localReleaseDestination}"
        }
        maven {
            name = "SonatypeStaging"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId project.PUBLISH_ARTIFACT_ID
            pom {
                name = project.PUBLISH_ARTIFACT_ID
                description = 'Data sources for RandomGenKt.'
                url = gitUrl
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/EranBoudjnah/RandomGenKt/blob/master/LICENSE'
                    }
                }
                scm {
                    connection = gitUrl
                    developerConnection = gitUrl
                    url = gitUrl
                }
                developers {
                    developer {
                        id = "EranBoudjnah"
                        name = "Eran Boudjnah"
                        email = "eranbou+randomgenkt@gmail.com"
                    }
                }
            }
        }
    }
}

task zipRelease(type: Zip) {
    from localReleaseDestination
    setDestinationDirectory buildDir
    setArchiveFileName "release-${pomVersion}.zip"
}

task generateRelease {
    doLast {
        println "Release ${pomVersion} can be found at ${localReleaseDestination}/"
        println "Release ${pomVersion} zipped can be found ${buildDir}/release-${pomVersion}.zip"
    }
}

generateRelease
        .dependsOn(publishing)
        .dependsOn(zipRelease)
